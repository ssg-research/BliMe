# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

import shutil
import os
import subprocess
import sys

from sphinx.util import logging
logger = logging.getLogger(__name__)

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

# -- Project information -----------------------------------------------------

project = u'FireSim'
copyright = u'2018, Sagar Karandikar, Howard Mao, Donggyu Kim, David Biancolin, Alon Amid, and Berkeley Architecture Research'
author = u'Sagar Karandikar, Howard Mao, Donggyu Kim, David Biancolin, Alon Amid, and Berkeley Architecture Research'

on_rtd = os.environ.get("READTHEDOCS") == "True"
on_gha = os.environ.get("GITHUB_ACTIONS") == "true"

if on_rtd:
    for item, value in os.environ.items():
        print("[READTHEDOCS] {} = {}".format(item, value))

# Come up with a short version string for the build. This is doing a bunch of lifting:
# - format doc text that self-references its version (see title page). This may be used in an ad-hoc
#   way to produce references to things like ScalaDoc, etc...
# - procedurally generate github URL references using via `gh-file-ref`
if on_rtd:
    logger.info("Running in a RTD Container")
    rtd_version = os.environ.get("READTHEDOCS_VERSION")
    if rtd_version in ["stable", "latest"]:
        # get the latest git tag (which is what rtd normally builds under "stable")
        # this works since rtd builds things within the repo
        process = subprocess.Popen(["git", "describe", "--exact-match", "--tags"], stdout=subprocess.PIPE)
        output = process.communicate()[0].decode("utf-8").strip()
        if process.returncode == 0:
            version = output
        else:
            version = "v?.?.?" # this should not occur as "stable" is always pointing to tagged version
    else:
        version = rtd_version # name of a branch
elif on_gha:
    # GitHub actions does a build of the docs to ensure they are free of warnings.
    logger.info("Running under GitHub Actions Pipeline")
    # Looking up a branch name or tag requires switching on the event type that triggered the workflow
    # so just use the SHA of the commit instead.
    version = os.environ.get("GITHUB_SHA")
else:
    # When running locally, try to set version to a branch name that could be
    # used to reference files on GH that could be added or moved. This should match rtd_version when running
    # in a RTD build container
    process = subprocess.Popen(["git", "rev-parse", "--abbrev-ref", "HEAD"], stdout=subprocess.PIPE)
    output = process.communicate()[0].decode("utf-8").strip()
    if process.returncode == 0:
        version = output
    else:
        raise Exception("git rev-parse --abbrev-ref HEAD returned non-zero")

logger.info(f"Setting |version| to {version}.")

# for now make these match
release = version

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx_tabs.tabs'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_parsers = {
}

source_suffix = ['.rst']
#source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    'collapse_navigation': False,
    'logo_only': True,
#    'display_version': True,
#    'navigation_depth': 4,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

html_logo = '_static/firesim_logo_small.png'

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'FireSimdoc'

html_context = {
    "version": version
}

# add rst to end of each rst source file
# can put custom strings here that are generated from this file
rst_epilog = f"""
.. |overall_version| replace:: {version}
"""

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'FireSim.tex', u'FireSim Documentation',
     u'Sagar Karandikar, Howard Mao, \\\\ Donggyu Kim, David Biancolin, \\\\ Alon Amid,  \\\\ Berkeley Architecture Research', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'firesim', u'FireSim Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'FireSim', u'FireSim Documentation',
     author, 'FireSim', 'One line description of project.',
     'Miscellaneous'),
]

# -- handle re-directs for pages that move
# taken from https://tech.signavio.com/2017/managing-sphinx-redirects

redirect_files = [ ]

def copy_legacy_redirects(app, docname): # Sphinx expects two arguments
    if app.builder.name == 'html':
        for html_src_path in redirect_files:
            target_path = app.outdir + '/' + html_src_path
            src_path = app.srcdir + '/' + html_src_path

            if os.path.isfile(src_path):
                shutil.copyfile(src_path, target_path)

def gh_file_ref_role(name, rawtext, text, lineno, inliner, options={}, content=[]):
    """
    Produces a github.com reference to a blob or tree at path {text}.

    Example:

    :gh-file-ref:`my/path`

    Produces a hyperlink with the text "my/path" that refers the url:
    https://www.github.com/firesim/firesim/blob/<version>/my/path.

    Where version is the same as would be substituted by using |version| in
    html text, and is resolved in conf.py.

    This is based off custom role sphinx plugins like
    https://github.com/tdi/sphinxcontrib-manpage. I've inlined this here for
    now, but we could just as well make it a module and register it under
    `extensions` in conf.py
    """

    import docutils
    import requests

    # Note GitHub permits referring to a tree as a 'blob' in these URLs without returning a 404.
    # So I've unconditionally chosen to use blob.
    url = f"https://www.github.com/firesim/firesim/blob/{version}/{text}"

    logger.info(f"Testing GitHub URL {url} exists...")
    status_code = requests.get(url).status_code
    if status_code != 200:
        message = f"[Line {lineno}] :{name}:`{text}` produces URL {url} returning status code {status_code}. " \
                  "Ensure your path is correct and all commits that may have moved or renamed files have been pushed to github.com."
        logger.error(message)
        sys.exit(1)

    docutils.parsers.rst.roles.set_classes(options)
    node = docutils.nodes.reference(rawtext, text, refuri=url, **options)
    return [node], []

def setup(app):
    # Add roles to simplify github reference generation
    app.add_role('gh-file-ref', gh_file_ref_role)
    app.connect('build-finished', copy_legacy_redirects)
